Imports DevExpress.Xpo
Imports DevExpress.Xpo.DB

Public Class Register

    Inherits System.Web.UI.Page
    Dim vartsession As Session
    Private Sub Page_Init(sender As Object, e As EventArgs) Handles Me.Init
        Dim session As Session = XpoHelper2.GetNewSession(XpoHelper2.Database.CRM)
        XpoDataSource1.Session = session
    End Sub

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load


    End Sub

    Protected Sub btnCreateUser_Click(sender As Object, e As EventArgs) Handles btnCreateUser.Click
        Const intGPPracticeID As Integer = 14250
        Dim strGPName As String
        Dim intGPPersonID As Integer
        Dim data As SelectedData

        'pass the first and Lastnames together space separated
        strGPName = LTrim(RTrim(tbFirstName.Text)) & " " & LTrim(RTrim(tbLastName.Text))
        Try
            'Create our User in The asp membership table
            Dim user As MembershipUser = Membership.CreateUser(tbUserName.Text, tbPassword.Text, tbEmail.Text)

            'Create the person record for the GP in CRM
            'first call stored procedure and return personid of created person of type GP
            data = CRM.SprocHelper.Execws_VitalityGP_GPAdd(XpoDataSource1.Session, intGPPracticeID, tbGPCode.Text, strGPName, tbTelephone.Text, tbEmail.Text)
            'Take the GP's CRM Person ID and store it in the profile Web Application Projects can still use the ProfileCommon object but only at runtime. 
            'The code for it is just not generated in the project itself but the class is generated by ASP.Net and is present at runtime.
            'http://stackoverflow.com/questions/426609/how-to-assign-profile-values

            Dim Profile As Object = ProfileBase.Create(tbUserName.Text)
            For Each row As SelectStatementResultRow In data.ResultSet(0).Rows
                intGPPersonID = row.Values(0)
            Next row
            Profile.PersonID = intGPPersonID
            Profile.Save()


            Response.Redirect(If(Request.QueryString("ReturnUrl"), "~/Account/RegisterSuccess.aspx"))

        Catch exc As MembershipCreateUserException
            If exc.StatusCode = MembershipCreateStatus.DuplicateEmail OrElse exc.StatusCode = MembershipCreateStatus.InvalidEmail Then
                tbEmail.ErrorText = exc.Message
                tbEmail.IsValid = False
            ElseIf exc.StatusCode = MembershipCreateStatus.InvalidPassword Then
                tbPassword.ErrorText = exc.Message
                tbPassword.IsValid = False
            Else
                tbUserName.ErrorText = exc.Message
                tbUserName.IsValid = False
            End If
        End Try




        '      Dim u As MembershipUser
        '      u = Membership.GetUser(User.Identity.Name)

        '      Try
        '          'Equivalent of an Insert Statement in SQL
        '          Using uow = New UnitOfWork()

        '              Dim save As New VitGP(uow)

        '              Pers_CompanyId()
        ',Pers_FirstName, Pers_LastName, Pers_type, pers_source
        ',pers_CreatedBy,pers_CreatedDate,pers_UpdatedBy,pers_UpdatedDate,pers_TimeStamp,Pers_UploadDate
        ',pers_GPCode)


        '              save.CompanyId = 14250
        '              save.FirstName = txtFirstName.Text
        '              save.LastName = txtLastname.Text
        '              save.Type = "GP"
        '              save.Source = "Vitality"







        '              save.
        '              'u.ProviderUserKey()
        '              save.Save()

        '              '.Save() will persistent your changes to the object but uow.CommitChanges() will save those changes back to the database
        '              uow.CommitChanges()

        '          End Using


        '      Catch ex As Exception
        '          MsgBox(ex.Message)
        '          '  errorMessageLabel.Visible = True
        'End Try











    End Sub

End Class